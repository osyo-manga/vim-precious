precious.txt	コンテキストによって 'filetype' を切り換える

==============================================================================
概要						*precious-introduction*

*precious* はコンテキストによって 'filetype' を切り換える為のプラグインです。


Requirement:

  context_filetype.vim - https://github.com/Shougo/context_filetype.vim

  vim-textobj-user - https://github.com/kana/vim-textobj-user
  ※|<Plug>(textobj-precious-i)| を使用したい場合のみ必要

  quickrun.vim - https://github.com/thinca/vim-quickrun
  ※|<Plug>(precious-quickrun-op)| を使用した場合のみ必要


==============================================================================
使い方						*precious-usage*

対応しているコンテキストにカーソルが移動すると自動的に 'filetype' が設定されま
す。


==============================================================================
インターフェース				*precious-interface*
------------------------------------------------------------------------------
コマンド					*precious-commands*

:PreciousSwitch [{filetype}]			*:PreciousSwitch*
	内部で {filetype} を引数にした |precious#switch()| を呼び出します。
	引数がなければ |precious#context_filetype()| の値が使用されます。

:PreciousSetContextLocal {option}		*:PreciousSetContextLocal*
	現在のコンテキスに対する |setlocal| {option} を行います。
	そのコンテキストでのみ設定を行いたいような時に使用します。
	ここで設定された値は設定したコンテキストを抜けるとリセットされます。

Example :>
	" setlocal tabstop=8 と等価
	" コンテキストを抜けると元の値が設定される
	PreciousSetContextLocal tabstop=8
<

:PreciousReset					*:PreciousReset*
	|precious#base_filetype()| を引数にした |:PreciousSwitch| を呼び出しま
	す。
	元の 'filetype' に戻したい場合はこのコマンドを呼び出して下さい。

------------------------------------------------------------------------------
関数						*precious-functions*

precious#context_filetype()			*precious#context_filetype()*
	現在のコンテキストを意識した 'filetype' を返します。
	コンテキストの判定は |precious-matcher| によって処理されます。
	コンテキストが見つからなければ |precious#base_filetype()| を返します。

precious#base_filetype()			*precious#base_filetype()*
	元となる 'filetype' を返します。

precious#set_base_filetype()			*precious#set_base_filetype()*
	元となる 'filetype' を設定します。
	これは 'filetype' が設定された時に自動的に呼び出されます。

precious#switch({filetype})			*precious##switch()*
	{filetype} へ切り換える処理を行います。
	{filetype} が以前に呼び出された |precious#switch()| から変更されていれば
	|precious-switchers| で定義されている処理を呼び出します。

precious#quickrun_operator({wise})		*precious#quickrun_operator()*
	'operatorfunc' に対して設定するための関数です。
	動作は |quickrun#operator()| と同じですが |quickrun-option-type| は現
	在のコンテキストの 'filetype' が使用されます。

------------------------------------------------------------------------------
autocmd						*precious-autocmd*

コンテキストが切り替わった時に処理を呼び出したい場合はこれを使用して下さい。

PreciousFileTypeLeave_{filetype}		*PreciousFileTypeLeave_*
	{filetype} から別のコンテキストに移った時に呼ばれます。

PreciousFileType				*PreciousFileType*
	コンテキストが切り替わった時に呼ばれます。

Example: >
	augroup test
	autocmd!
		" コンテキストが切り替わった時にその filetype を表示
		autocmd User PreciousFileType :echo precious#context_filetype()
	augroup END
<

PreciousFileType_{filetype}			*PreciousFileType_*
	{filetype} のコンテキストへ切り替わった時に呼ばれます。

Example: >
	augroup test
	autocmd!
		" ruby のコンテキストに入った時、tabstop=8 を設定する
		" :PreciousSetContextLocal を使用することで
		" ruby のコンテキストを抜けると元の値に戻すことが出来る
		autocmd User PreciousFileType_ruby :PreciousSetContextLocal tabstop=8
	augroup END
<

------------------------------------------------------------------------------
マッピング					*textobj-precious-mapping*

<Plug>(textobj-precious-i)			*<Plug>(textobj-precious-i)*
	元の filetype を基準としたコンテキストの範囲の textobj です。
	このマッピングを使用するためには下記のプラグインを導入しておく必要があ
	ります。

<Plug>(precious-quickrun-op)			*<Plug>(precious-quickrun-op)*
	続くモーションの範囲を実行します。これは
	'operatorfunc' の値を "precious#quickrun_operator" に変更します。


==============================================================================
設定						*precious-setting*

------------------------------------------------------------------------------
変数						*precious-variables*

g:precious_enable_switchers			*g:precious_enable_switchers*
	|precious-switchers| の有無を設定する辞書です。
	特定の 'filetype' で |precious-switchers| を無効にしたい場合はこれに
	設定して下さい。
	また、この時に判定する 'filetype' には |precious#base_filetype()| が使
	用されます。
Example: >
	" filetype=vim 以外の setfiletype を無効にする
	" * は全ての filetype に適用する
	let g:precious_enable_switchers = {
	\	"*" : {
	\		"setfiletype" : 0
	\	},
	\	"vim" : {
	\		"setfiletype" : 1
	\	},
	\}
<

			*precious-precious_enable_switch_CursorMoved*
g:precious_enable_switch_CursorMoved
	'filetype' をキーに持つ辞書です。
	1 が設定されていれば |CursorMoved| 時に |:PreciousSwitch| を呼び出しま
	す。
	デフォルトでは全ての 'filetype' で有効になっています。
Example: >
	" filetype=help 以外の setfiletype を無効にする
	" * は全ての filetype に適用する
	let g:precious_enable_switch_CursorMoved = {
	\	"*" : 1,
	\	"help" : 0
	\}
<

			*precious-precious_enable_switch_CursorMoved_i*
g:precious_enable_switch_CursorMoved_i
	'filetype' をキーに持つ辞書です。
	1 が設定されていれば |CursorMovedI| 時に |:PreciousSwitch| を呼び出しま
	す。
	デフォルトでは全ての 'filetype' で有効になっています。
	使い方は |g:precious_enable_switch_CursorMoved| と同じです。


==============================================================================
matchers					*precious-matchers*

現在のコンテキストがどの |filetype| なのかを判定する為に使用されます。

					*precious-matcher-context_blocks*
"context_filetype_vim"
	外部プラグインである context_filetype.vim を使用してコンテキストの判定
	を行います。


==============================================================================
switchers					*precious-switchers*

コンテキストが切り替わった時の処理を定義します。

"setfiletype"					*precious-switcher-setfiletype*
	コンテキストの filetype を 'filetype' に設定します。
	この処理で 'filetype' が設定された場合、|precious#base_filetype| の値
	は変更されません。

"autocmd_context_filetype"		*precious-switcher-autocmd_context_filetype*
	コンテキストが切り替わった時に |precious-autocmd| を呼び出します。


==============================================================================
設定例						*precious-example*

insert mode に入った時に 'filetype' を切り換える。
>
	" カーソル移動時の自動切り替えを無効化
	let g:precious_enable_switch_CursorMoved = {
	\	"*" : 0
	\}
	let g:precious_enable_switch_CursorMoved_i = {
	\	"*" : 0
	\}

	" insert に入った時にスイッチし、抜けた時に元に戻す
	augroup test
		autocmd!
		autocmd InsertEnter * :PreciousSwitch
		autocmd InsertLeave * :PreciousReset
	augroup END
<


コンテキストの範囲を |quickrun.vim| する
>
	" <Space>qic で quickrun.vim する
	" ただし、この場合 switchers の "setfiletype" が有効になっている必要が
	" あります
	nmap <Space>q <Plug>(precious-quickrun-op)
	omap ic <Plug>(textobj-precious-i)
	vmap ic <Plug>(textobj-precious-i)
<


filetype=vim で |precious-switcher-setfiletype| を無効にする
>
	let g:precious_enable_switchers = {
	\	"vim" : {
	\		"setfiletype" : 0
	\	},
	\}
<


filetype=vim 以外で |precious-switcher-setfiletype| を無効にする
>
	let g:precious_enable_switchers = {
	\	"*" : {
	\		"setfiletype" : 0
	\	},
	\	"vim" : {
	\		"setfiletype" : 1
	\	},
	\}
<


filetype=help でカーソル移動時の |:PreciousSwitch| を無効にする。
>
	let g:precious_enable_switch_CursorMoved = {
	\	"help" : 0
	\}
	
	let g:precious_enable_switch_CursorMoved_i= {
	\	"help" : 0
	\}
<


'filetype' を変更せずに 'syntax' のみ設定する
>
" setfiletype を無効
let g:precious_enable_switchers = {
\	"*" : {
\		"setfiletype" : 0
\	},
\}

" コンテキストが切り替わった場合、syntax を設定
augroup test
	autocmd!
	autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
augroup END
<


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
